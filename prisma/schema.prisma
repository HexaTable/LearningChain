// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String?                @unique
  emailVerified    DateTime?              @map("email_verified")
  image            String?
  createdAt        DateTime               @default(now()) @map(name: "created_at")
  updatedAt        DateTime               @updatedAt @map(name: "updated_at")
  accounts         Account[]
  sessions         Session[]
  wallet           String?
  rating           Float?
  coursesCreated   Course[]
  coursesPurchased UserCoursesPurchased[]
  nfts             NFT[]

  @@map(name: "users")
}

model Course {
  id          String                 @id @default(cuid())
  name        String
  description String
  createdAt   DateTime               @default(now()) @map(name: "created_at")
  updatedAt   DateTime               @updatedAt @map(name: "updated_at")
  author      User                   @relation(fields: [authorId], references: [id])
  authorId    String                 @map("author_id")
  rating      Float
  price       Float
  image       String?
  category    Category               @relation(fields: [categoryId], references: [id])
  categoryId  String                 @map("category_id")
  students    UserCoursesPurchased[]
  nfts        NFT[]

  @@map(name: "courses")
}

model UserCoursesPurchased {
  id          String       @id @default(cuid())
  userId      String
  courseId    String
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  transaction Transaction?

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map(name: "users_courses_purchased")
}

model Transaction {
  id                String                @id @default(cuid())
  createdAt         DateTime              @default(now()) @map(name: "created_at")
  updatedAt         DateTime              @updatedAt @map(name: "updated_at")
  amount            Float
  description       String
  hash              String?
  purchasedCourse   UserCoursesPurchased? @relation(fields: [purchasedCourseId], references: [id])
  purchasedCourseId String?               @unique @map("purchased_item_id")

  @@map(name: "transactions")
}

model NFT {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  name        String
  description String
  image       String
  price       Float
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String   @map("course_id")

  @@map(name: "nfts")
}

model Category {
  id      String   @id @default(cuid())
  name    String
  courses Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
